plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'eclipse'
    id 'org.checkerframework' version '0.6.18'
}

apply plugin: 'org.checkerframework'

group = 'com.dailycodebuffer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    testImplementation('com.h2database:h2')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.5.3.Final"
}

/*
checkerFramework {
    checkers = [
    'org.checkerframework.checker.nullness.NullnessChecker'
    ]
}
*/

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file.whenMerged { cp ->
            def entries = cp.entries;
            def src = new org.gradle.plugins.ide.eclipse.model.SourceFolder('build/generated/sources/annotationProcessor/java/main/', null)
            entries.add(src)
        }
    }
}
